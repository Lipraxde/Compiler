Terminals unused in grammar

   KWdef


Grammar

    0 $accept: program $end

    1 program_name: IDENT

    2 var_name: IDENT

    3 func_name: IDENT

    4 int_const: OCTAL
    5          | INTEGER

    6 number_const: int_const
    7             | FLOAT
    8             | SCIENTIFIC

    9 string_const: STRING

   10 bool_const: KWtrue
   11           | KWfalse

   12 const_group: number_const
   13            | string_const
   14            | bool_const

   15 scalar_type: KWinteger
   16            | KWreal
   17            | KWstring
   18            | KWboolean

   19 var_type: scalar_type
   20         | ddim_list scalar_type

   21 func_ret_type: COLON var_type
   22              | %empty

   23 vacd_list: vacd_list define_var
   24          | vacd_list define_const
   25          | %empty

   26 var_list: var_list COMMA var_name
   27         | var_name

   28 ddim_list: ddim_list KWarray int_const KWto int_const KWof
   29          | KWarray int_const KWto int_const KWof

   30 dfunc_list: dfunc_list define_func
   31           | %empty

   32 arg_list: _non_empty_arg_list
   33         | %empty

   34 _non_empty_arg_list: _non_empty_arg_list SEMICOLON define_arg
   35                    | define_arg

   36 state_list: state_list define_state
   37           | %empty

   38 expr_list: _non_empty_expr_list
   39          | %empty

   40 _non_empty_expr_list: _non_empty_expr_list COMMA expression_node
   41                     | expression_node

   42 ref_list: ref_list Lbracket expression_node Rbracket
   43         | Lbracket expression_node Rbracket

   44 expression: expr_order8

   45 $@1: %empty

   46 expr_order8: expr_order8 TF_OR expr_order7 $@1
   47            | expr_order7

   48 $@2: %empty

   49 expr_order7: expr_order7 TF_AND expr_order6 $@2
   50            | expr_order6

   51 $@3: %empty

   52 expr_order6: TF_NOT expr_order6 $@3
   53            | expr_order5

   54 $@4: %empty

   55 expr_order5: expr_order4 OP_LT expr_order5 $@4

   56 $@5: %empty

   57 expr_order5: expr_order4 OP_LE expr_order5 $@5

   58 $@6: %empty

   59 expr_order5: expr_order4 OP_GT expr_order5 $@6

   60 $@7: %empty

   61 expr_order5: expr_order4 OP_GE expr_order5 $@7

   62 $@8: %empty

   63 expr_order5: expr_order4 OP_EQ expr_order5 $@8

   64 $@9: %empty

   65 expr_order5: expr_order4 OP_NE expr_order5 $@9
   66            | expr_order4

   67 $@10: %empty

   68 expr_order4: expr_order4 OP_ADD expr_order3 $@10

   69 $@11: %empty

   70 expr_order4: expr_order4 OP_DEL expr_order3 $@11
   71            | expr_order3

   72 $@12: %empty

   73 expr_order3: expr_order3 OP_MUL expr_order2 $@12

   74 $@13: %empty

   75 expr_order3: expr_order3 OP_DIV expr_order2 $@13

   76 $@14: %empty

   77 expr_order3: expr_order3 OP_MOD expr_order2 $@14
   78            | expr_order2

   79 $@15: %empty

   80 expr_order2: OP_DEL expr_order2 $@15
   81            | expr_order1

   82 expr_order1: Lparenthese expression Rparenthese
   83            | func_invocation
   84            | var_reference
   85            | const_group

   86 define_var: KWvar var_list COLON var_type SEMICOLON

   87 define_const: KWvar var_list COLON const_group SEMICOLON
   88             | KWvar var_list COLON OP_DEL number_const SEMICOLON

   89 define_func: func_name Lparenthese arg_list Rparenthese func_ret_type SEMICOLON compound_statement KWend IDENT

   90 define_arg: var_list COLON var_type

   91 define_state: compound_statement
   92             | simp_statement SEMICOLON
   93             | cond_statement
   94             | whil_statement
   95             | for__statement
   96             | func_invocation SEMICOLON
   97             | ret__statement SEMICOLON

   98 simp_statement: var_reference ASSIGNMENT expression_node
   99               | KWprint expression_node
  100               | KWread var_reference

  101 var_reference: var_name
  102              | var_name ref_list

  103 func_invocation: func_name Lparenthese expr_list Rparenthese

  104 ret__statement: KWreturn expression_node

  105 expression_node: expression_start expression

  106 expression_start: %empty

  107 cond_statement: cond_start KWif expression_node KWthen statement_declar cond_midd KWelse statement_declar KWend KWif
  108               | cond_start KWif expression_node KWthen statement_declar KWend KWif

  109 cond_start: %empty

  110 cond_midd: %empty

  111 whil_statement: while_start KWwhile expression_node KWdo statement_declar KWend KWdo

  112 while_start: %empty

  113 for__statement: for_start KWfor var_name ASSIGNMENT int_const KWto int_const KWdo statement_declar KWend KWdo

  114 for_start: %empty

  115 statement_declar: statement_start state_list

  116 statement_start: %empty

  117 var_and_const_declar: vacd_start vacd_list

  118 vacd_start: %empty

  119 function_declar: dfunc_start dfunc_list

  120 dfunc_start: %empty

  121 compound_statement: compound_statement_start KWbegin var_and_const_declar statement_declar KWend

  122 compound_statement_start: %empty

  123 program: prog_start program_name SEMICOLON var_and_const_declar function_declar compound_statement KWend IDENT

  124 prog_start: %empty


Terminals, with rules where they appear

$end (0) 0
error (256)
COMMA (258) 26 40
SEMICOLON (259) 34 86 87 88 89 92 96 97 123
COLON (260) 21 86 87 88 90
Lparenthese (261) 82 89 103
Rparenthese (262) 82 89 103
Lbracket (263) 42 43
Rbracket (264) 42 43
ASSIGNMENT (265) 98 113
OP_ADD (266) 68
OP_DEL (267) 70 80 88
OP_MUL (268) 73
OP_DIV (269) 75
OP_MOD (270) 77
OP_LT (271) 55
OP_LE (272) 57
OP_GT (273) 59
OP_GE (274) 61
OP_EQ (275) 63
OP_NE (276) 65
TF_AND (277) 49
TF_OR (278) 46
TF_NOT (279) 52
KWarray (280) 28 29
KWbegin (281) 121
KWboolean (282) 18
KWdef (283)
KWdo (284) 111 113
KWelse (285) 107
KWend (286) 89 107 108 111 113 121 123
KWfalse (287) 11
KWfor (288) 113
KWinteger (289) 15
KWif (290) 107 108
KWof (291) 28 29
KWprint (292) 99
KWread (293) 100
KWreal (294) 16
KWstring (295) 17
KWthen (296) 107 108
KWto (297) 28 29 113
KWtrue (298) 10
KWreturn (299) 104
KWvar (300) 86 87 88
KWwhile (301) 111
OCTAL (302) 4
INTEGER (303) 5
FLOAT (304) 7
SCIENTIFIC (305) 8
STRING (306) 9
IDENT (307) 1 2 3 89 123


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
program_name (54)
    on left: 1, on right: 123
var_name (55)
    on left: 2, on right: 26 27 101 102 113
func_name (56)
    on left: 3, on right: 89 103
int_const (57)
    on left: 4 5, on right: 6 28 29 113
number_const (58)
    on left: 6 7 8, on right: 12 88
string_const (59)
    on left: 9, on right: 13
bool_const (60)
    on left: 10 11, on right: 14
const_group (61)
    on left: 12 13 14, on right: 85 87
scalar_type (62)
    on left: 15 16 17 18, on right: 19 20
var_type (63)
    on left: 19 20, on right: 21 86 90
func_ret_type (64)
    on left: 21 22, on right: 89
vacd_list (65)
    on left: 23 24 25, on right: 23 24 117
var_list (66)
    on left: 26 27, on right: 26 86 87 88 90
ddim_list (67)
    on left: 28 29, on right: 20 28
dfunc_list (68)
    on left: 30 31, on right: 30 119
arg_list (69)
    on left: 32 33, on right: 89
_non_empty_arg_list (70)
    on left: 34 35, on right: 32 34
state_list (71)
    on left: 36 37, on right: 36 115
expr_list (72)
    on left: 38 39, on right: 103
_non_empty_expr_list (73)
    on left: 40 41, on right: 38 40
ref_list (74)
    on left: 42 43, on right: 42 102
expression (75)
    on left: 44, on right: 82 105
expr_order8 (76)
    on left: 46 47, on right: 44 46
$@1 (77)
    on left: 45, on right: 46
expr_order7 (78)
    on left: 49 50, on right: 46 47 49
$@2 (79)
    on left: 48, on right: 49
expr_order6 (80)
    on left: 52 53, on right: 49 50 52
$@3 (81)
    on left: 51, on right: 52
expr_order5 (82)
    on left: 55 57 59 61 63 65 66, on right: 53 55 57 59 61 63 65
$@4 (83)
    on left: 54, on right: 55
$@5 (84)
    on left: 56, on right: 57
$@6 (85)
    on left: 58, on right: 59
$@7 (86)
    on left: 60, on right: 61
$@8 (87)
    on left: 62, on right: 63
$@9 (88)
    on left: 64, on right: 65
expr_order4 (89)
    on left: 68 70 71, on right: 55 57 59 61 63 65 66 68 70
$@10 (90)
    on left: 67, on right: 68
$@11 (91)
    on left: 69, on right: 70
expr_order3 (92)
    on left: 73 75 77 78, on right: 68 70 71 73 75 77
$@12 (93)
    on left: 72, on right: 73
$@13 (94)
    on left: 74, on right: 75
$@14 (95)
    on left: 76, on right: 77
expr_order2 (96)
    on left: 80 81, on right: 73 75 77 78 80
$@15 (97)
    on left: 79, on right: 80
expr_order1 (98)
    on left: 82 83 84 85, on right: 81
define_var (99)
    on left: 86, on right: 23
define_const (100)
    on left: 87 88, on right: 24
define_func (101)
    on left: 89, on right: 30
define_arg (102)
    on left: 90, on right: 34 35
define_state (103)
    on left: 91 92 93 94 95 96 97, on right: 36
simp_statement (104)
    on left: 98 99 100, on right: 92
var_reference (105)
    on left: 101 102, on right: 84 98 100
func_invocation (106)
    on left: 103, on right: 83 96
ret__statement (107)
    on left: 104, on right: 97
expression_node (108)
    on left: 105, on right: 40 41 42 43 98 99 104 107 108 111
expression_start (109)
    on left: 106, on right: 105
cond_statement (110)
    on left: 107 108, on right: 93
cond_start (111)
    on left: 109, on right: 107 108
cond_midd (112)
    on left: 110, on right: 107
whil_statement (113)
    on left: 111, on right: 94
while_start (114)
    on left: 112, on right: 111
for__statement (115)
    on left: 113, on right: 95
for_start (116)
    on left: 114, on right: 113
statement_declar (117)
    on left: 115, on right: 107 108 111 113 121
statement_start (118)
    on left: 116, on right: 115
var_and_const_declar (119)
    on left: 117, on right: 121 123
vacd_start (120)
    on left: 118, on right: 117
function_declar (121)
    on left: 119, on right: 123
dfunc_start (122)
    on left: 120, on right: 119
compound_statement (123)
    on left: 121, on right: 89 91 123
compound_statement_start (124)
    on left: 122, on right: 121
program (125)
    on left: 123, on right: 0
prog_start (126)
    on left: 124, on right: 123


State 0

    0 $accept: . program $end

    $default  reduce using rule 124 (prog_start)

    program     go to state 1
    prog_start  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

  123 program: prog_start . program_name SEMICOLON var_and_const_declar function_declar compound_statement KWend IDENT

    IDENT  shift, and go to state 4

    program_name  go to state 5


State 3

    0 $accept: program $end .

    $default  accept


State 4

    1 program_name: IDENT .

    $default  reduce using rule 1 (program_name)


State 5

  123 program: prog_start program_name . SEMICOLON var_and_const_declar function_declar compound_statement KWend IDENT

    SEMICOLON  shift, and go to state 6


State 6

  123 program: prog_start program_name SEMICOLON . var_and_const_declar function_declar compound_statement KWend IDENT

    $default  reduce using rule 118 (vacd_start)

    var_and_const_declar  go to state 7
    vacd_start            go to state 8


State 7

  123 program: prog_start program_name SEMICOLON var_and_const_declar . function_declar compound_statement KWend IDENT

    $default  reduce using rule 120 (dfunc_start)

    function_declar  go to state 9
    dfunc_start      go to state 10


State 8

  117 var_and_const_declar: vacd_start . vacd_list

    $default  reduce using rule 25 (vacd_list)

    vacd_list  go to state 11


State 9

  123 program: prog_start program_name SEMICOLON var_and_const_declar function_declar . compound_statement KWend IDENT

    $default  reduce using rule 122 (compound_statement_start)

    compound_statement        go to state 12
    compound_statement_start  go to state 13


State 10

  119 function_declar: dfunc_start . dfunc_list

    $default  reduce using rule 31 (dfunc_list)

    dfunc_list  go to state 14


State 11

   23 vacd_list: vacd_list . define_var
   24          | vacd_list . define_const
  117 var_and_const_declar: vacd_start vacd_list .

    KWvar  shift, and go to state 15

    $default  reduce using rule 117 (var_and_const_declar)

    define_var    go to state 16
    define_const  go to state 17


State 12

  123 program: prog_start program_name SEMICOLON var_and_const_declar function_declar compound_statement . KWend IDENT

    KWend  shift, and go to state 18


State 13

  121 compound_statement: compound_statement_start . KWbegin var_and_const_declar statement_declar KWend

    KWbegin  shift, and go to state 19


State 14

   30 dfunc_list: dfunc_list . define_func
  119 function_declar: dfunc_start dfunc_list .

    IDENT  shift, and go to state 20

    $default  reduce using rule 119 (function_declar)

    func_name    go to state 21
    define_func  go to state 22


State 15

   86 define_var: KWvar . var_list COLON var_type SEMICOLON
   87 define_const: KWvar . var_list COLON const_group SEMICOLON
   88             | KWvar . var_list COLON OP_DEL number_const SEMICOLON

    IDENT  shift, and go to state 23

    var_name  go to state 24
    var_list  go to state 25


State 16

   23 vacd_list: vacd_list define_var .

    $default  reduce using rule 23 (vacd_list)


State 17

   24 vacd_list: vacd_list define_const .

    $default  reduce using rule 24 (vacd_list)


State 18

  123 program: prog_start program_name SEMICOLON var_and_const_declar function_declar compound_statement KWend . IDENT

    IDENT  shift, and go to state 26


State 19

  121 compound_statement: compound_statement_start KWbegin . var_and_const_declar statement_declar KWend

    $default  reduce using rule 118 (vacd_start)

    var_and_const_declar  go to state 27
    vacd_start            go to state 8


State 20

    3 func_name: IDENT .

    $default  reduce using rule 3 (func_name)


State 21

   89 define_func: func_name . Lparenthese arg_list Rparenthese func_ret_type SEMICOLON compound_statement KWend IDENT

    Lparenthese  shift, and go to state 28


State 22

   30 dfunc_list: dfunc_list define_func .

    $default  reduce using rule 30 (dfunc_list)


State 23

    2 var_name: IDENT .

    $default  reduce using rule 2 (var_name)


State 24

   27 var_list: var_name .

    $default  reduce using rule 27 (var_list)


State 25

   26 var_list: var_list . COMMA var_name
   86 define_var: KWvar var_list . COLON var_type SEMICOLON
   87 define_const: KWvar var_list . COLON const_group SEMICOLON
   88             | KWvar var_list . COLON OP_DEL number_const SEMICOLON

    COMMA  shift, and go to state 29
    COLON  shift, and go to state 30


State 26

  123 program: prog_start program_name SEMICOLON var_and_const_declar function_declar compound_statement KWend IDENT .

    $default  reduce using rule 123 (program)


State 27

  121 compound_statement: compound_statement_start KWbegin var_and_const_declar . statement_declar KWend

    $default  reduce using rule 116 (statement_start)

    statement_declar  go to state 31
    statement_start   go to state 32


State 28

   89 define_func: func_name Lparenthese . arg_list Rparenthese func_ret_type SEMICOLON compound_statement KWend IDENT

    IDENT  shift, and go to state 23

    $default  reduce using rule 33 (arg_list)

    var_name             go to state 24
    var_list             go to state 33
    arg_list             go to state 34
    _non_empty_arg_list  go to state 35
    define_arg           go to state 36


State 29

   26 var_list: var_list COMMA . var_name

    IDENT  shift, and go to state 23

    var_name  go to state 37


State 30

   86 define_var: KWvar var_list COLON . var_type SEMICOLON
   87 define_const: KWvar var_list COLON . const_group SEMICOLON
   88             | KWvar var_list COLON . OP_DEL number_const SEMICOLON

    OP_DEL      shift, and go to state 38
    KWarray     shift, and go to state 39
    KWboolean   shift, and go to state 40
    KWfalse     shift, and go to state 41
    KWinteger   shift, and go to state 42
    KWreal      shift, and go to state 43
    KWstring    shift, and go to state 44
    KWtrue      shift, and go to state 45
    OCTAL       shift, and go to state 46
    INTEGER     shift, and go to state 47
    FLOAT       shift, and go to state 48
    SCIENTIFIC  shift, and go to state 49
    STRING      shift, and go to state 50

    int_const     go to state 51
    number_const  go to state 52
    string_const  go to state 53
    bool_const    go to state 54
    const_group   go to state 55
    scalar_type   go to state 56
    var_type      go to state 57
    ddim_list     go to state 58


State 31

  121 compound_statement: compound_statement_start KWbegin var_and_const_declar statement_declar . KWend

    KWend  shift, and go to state 59


State 32

  115 statement_declar: statement_start . state_list

    $default  reduce using rule 37 (state_list)

    state_list  go to state 60


State 33

   26 var_list: var_list . COMMA var_name
   90 define_arg: var_list . COLON var_type

    COMMA  shift, and go to state 29
    COLON  shift, and go to state 61


State 34

   89 define_func: func_name Lparenthese arg_list . Rparenthese func_ret_type SEMICOLON compound_statement KWend IDENT

    Rparenthese  shift, and go to state 62


State 35

   32 arg_list: _non_empty_arg_list .
   34 _non_empty_arg_list: _non_empty_arg_list . SEMICOLON define_arg

    SEMICOLON  shift, and go to state 63

    $default  reduce using rule 32 (arg_list)


State 36

   35 _non_empty_arg_list: define_arg .

    $default  reduce using rule 35 (_non_empty_arg_list)


State 37

   26 var_list: var_list COMMA var_name .

    $default  reduce using rule 26 (var_list)


State 38

   88 define_const: KWvar var_list COLON OP_DEL . number_const SEMICOLON

    OCTAL       shift, and go to state 46
    INTEGER     shift, and go to state 47
    FLOAT       shift, and go to state 48
    SCIENTIFIC  shift, and go to state 49

    int_const     go to state 51
    number_const  go to state 64


State 39

   29 ddim_list: KWarray . int_const KWto int_const KWof

    OCTAL    shift, and go to state 46
    INTEGER  shift, and go to state 47

    int_const  go to state 65


State 40

   18 scalar_type: KWboolean .

    $default  reduce using rule 18 (scalar_type)


State 41

   11 bool_const: KWfalse .

    $default  reduce using rule 11 (bool_const)


State 42

   15 scalar_type: KWinteger .

    $default  reduce using rule 15 (scalar_type)


State 43

   16 scalar_type: KWreal .

    $default  reduce using rule 16 (scalar_type)


State 44

   17 scalar_type: KWstring .

    $default  reduce using rule 17 (scalar_type)


State 45

   10 bool_const: KWtrue .

    $default  reduce using rule 10 (bool_const)


State 46

    4 int_const: OCTAL .

    $default  reduce using rule 4 (int_const)


State 47

    5 int_const: INTEGER .

    $default  reduce using rule 5 (int_const)


State 48

    7 number_const: FLOAT .

    $default  reduce using rule 7 (number_const)


State 49

    8 number_const: SCIENTIFIC .

    $default  reduce using rule 8 (number_const)


State 50

    9 string_const: STRING .

    $default  reduce using rule 9 (string_const)


State 51

    6 number_const: int_const .

    $default  reduce using rule 6 (number_const)


State 52

   12 const_group: number_const .

    $default  reduce using rule 12 (const_group)


State 53

   13 const_group: string_const .

    $default  reduce using rule 13 (const_group)


State 54

   14 const_group: bool_const .

    $default  reduce using rule 14 (const_group)


State 55

   87 define_const: KWvar var_list COLON const_group . SEMICOLON

    SEMICOLON  shift, and go to state 66


State 56

   19 var_type: scalar_type .

    $default  reduce using rule 19 (var_type)


State 57

   86 define_var: KWvar var_list COLON var_type . SEMICOLON

    SEMICOLON  shift, and go to state 67


State 58

   20 var_type: ddim_list . scalar_type
   28 ddim_list: ddim_list . KWarray int_const KWto int_const KWof

    KWarray    shift, and go to state 68
    KWboolean  shift, and go to state 40
    KWinteger  shift, and go to state 42
    KWreal     shift, and go to state 43
    KWstring   shift, and go to state 44

    scalar_type  go to state 69


State 59

  121 compound_statement: compound_statement_start KWbegin var_and_const_declar statement_declar KWend .

    $default  reduce using rule 121 (compound_statement)


State 60

   36 state_list: state_list . define_state
  115 statement_declar: statement_start state_list .

    KWprint   shift, and go to state 70
    KWread    shift, and go to state 71
    KWreturn  shift, and go to state 72
    IDENT     shift, and go to state 73

    KWbegin   reduce using rule 122 (compound_statement_start)
    KWfor     reduce using rule 114 (for_start)
    KWif      reduce using rule 109 (cond_start)
    KWwhile   reduce using rule 112 (while_start)
    $default  reduce using rule 115 (statement_declar)

    var_name                  go to state 74
    func_name                 go to state 75
    define_state              go to state 76
    simp_statement            go to state 77
    var_reference             go to state 78
    func_invocation           go to state 79
    ret__statement            go to state 80
    cond_statement            go to state 81
    cond_start                go to state 82
    whil_statement            go to state 83
    while_start               go to state 84
    for__statement            go to state 85
    for_start                 go to state 86
    compound_statement        go to state 87
    compound_statement_start  go to state 13


State 61

   90 define_arg: var_list COLON . var_type

    KWarray    shift, and go to state 39
    KWboolean  shift, and go to state 40
    KWinteger  shift, and go to state 42
    KWreal     shift, and go to state 43
    KWstring   shift, and go to state 44

    scalar_type  go to state 56
    var_type     go to state 88
    ddim_list    go to state 58


State 62

   89 define_func: func_name Lparenthese arg_list Rparenthese . func_ret_type SEMICOLON compound_statement KWend IDENT

    COLON  shift, and go to state 89

    $default  reduce using rule 22 (func_ret_type)

    func_ret_type  go to state 90


State 63

   34 _non_empty_arg_list: _non_empty_arg_list SEMICOLON . define_arg

    IDENT  shift, and go to state 23

    var_name    go to state 24
    var_list    go to state 33
    define_arg  go to state 91


State 64

   88 define_const: KWvar var_list COLON OP_DEL number_const . SEMICOLON

    SEMICOLON  shift, and go to state 92


State 65

   29 ddim_list: KWarray int_const . KWto int_const KWof

    KWto  shift, and go to state 93


State 66

   87 define_const: KWvar var_list COLON const_group SEMICOLON .

    $default  reduce using rule 87 (define_const)


State 67

   86 define_var: KWvar var_list COLON var_type SEMICOLON .

    $default  reduce using rule 86 (define_var)


State 68

   28 ddim_list: ddim_list KWarray . int_const KWto int_const KWof

    OCTAL    shift, and go to state 46
    INTEGER  shift, and go to state 47

    int_const  go to state 94


State 69

   20 var_type: ddim_list scalar_type .

    $default  reduce using rule 20 (var_type)


State 70

   99 simp_statement: KWprint . expression_node

    $default  reduce using rule 106 (expression_start)

    expression_node   go to state 95
    expression_start  go to state 96


State 71

  100 simp_statement: KWread . var_reference

    IDENT  shift, and go to state 23

    var_name       go to state 74
    var_reference  go to state 97


State 72

  104 ret__statement: KWreturn . expression_node

    $default  reduce using rule 106 (expression_start)

    expression_node   go to state 98
    expression_start  go to state 96


State 73

    2 var_name: IDENT .
    3 func_name: IDENT .

    Lparenthese  reduce using rule 3 (func_name)
    $default     reduce using rule 2 (var_name)


State 74

  101 var_reference: var_name .
  102              | var_name . ref_list

    Lbracket  shift, and go to state 99

    $default  reduce using rule 101 (var_reference)

    ref_list  go to state 100


State 75

  103 func_invocation: func_name . Lparenthese expr_list Rparenthese

    Lparenthese  shift, and go to state 101


State 76

   36 state_list: state_list define_state .

    $default  reduce using rule 36 (state_list)


State 77

   92 define_state: simp_statement . SEMICOLON

    SEMICOLON  shift, and go to state 102


State 78

   98 simp_statement: var_reference . ASSIGNMENT expression_node

    ASSIGNMENT  shift, and go to state 103


State 79

   96 define_state: func_invocation . SEMICOLON

    SEMICOLON  shift, and go to state 104


State 80

   97 define_state: ret__statement . SEMICOLON

    SEMICOLON  shift, and go to state 105


State 81

   93 define_state: cond_statement .

    $default  reduce using rule 93 (define_state)


State 82

  107 cond_statement: cond_start . KWif expression_node KWthen statement_declar cond_midd KWelse statement_declar KWend KWif
  108               | cond_start . KWif expression_node KWthen statement_declar KWend KWif

    KWif  shift, and go to state 106


State 83

   94 define_state: whil_statement .

    $default  reduce using rule 94 (define_state)


State 84

  111 whil_statement: while_start . KWwhile expression_node KWdo statement_declar KWend KWdo

    KWwhile  shift, and go to state 107


State 85

   95 define_state: for__statement .

    $default  reduce using rule 95 (define_state)


State 86

  113 for__statement: for_start . KWfor var_name ASSIGNMENT int_const KWto int_const KWdo statement_declar KWend KWdo

    KWfor  shift, and go to state 108


State 87

   91 define_state: compound_statement .

    $default  reduce using rule 91 (define_state)


State 88

   90 define_arg: var_list COLON var_type .

    $default  reduce using rule 90 (define_arg)


State 89

   21 func_ret_type: COLON . var_type

    KWarray    shift, and go to state 39
    KWboolean  shift, and go to state 40
    KWinteger  shift, and go to state 42
    KWreal     shift, and go to state 43
    KWstring   shift, and go to state 44

    scalar_type  go to state 56
    var_type     go to state 109
    ddim_list    go to state 58


State 90

   89 define_func: func_name Lparenthese arg_list Rparenthese func_ret_type . SEMICOLON compound_statement KWend IDENT

    SEMICOLON  shift, and go to state 110


State 91

   34 _non_empty_arg_list: _non_empty_arg_list SEMICOLON define_arg .

    $default  reduce using rule 34 (_non_empty_arg_list)


State 92

   88 define_const: KWvar var_list COLON OP_DEL number_const SEMICOLON .

    $default  reduce using rule 88 (define_const)


State 93

   29 ddim_list: KWarray int_const KWto . int_const KWof

    OCTAL    shift, and go to state 46
    INTEGER  shift, and go to state 47

    int_const  go to state 111


State 94

   28 ddim_list: ddim_list KWarray int_const . KWto int_const KWof

    KWto  shift, and go to state 112


State 95

   99 simp_statement: KWprint expression_node .

    $default  reduce using rule 99 (simp_statement)


State 96

  105 expression_node: expression_start . expression

    Lparenthese  shift, and go to state 113
    OP_DEL       shift, and go to state 114
    TF_NOT       shift, and go to state 115
    KWfalse      shift, and go to state 41
    KWtrue       shift, and go to state 45
    OCTAL        shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOAT        shift, and go to state 48
    SCIENTIFIC   shift, and go to state 49
    STRING       shift, and go to state 50
    IDENT        shift, and go to state 73

    var_name         go to state 74
    func_name        go to state 75
    int_const        go to state 51
    number_const     go to state 52
    string_const     go to state 53
    bool_const       go to state 54
    const_group      go to state 116
    expression       go to state 117
    expr_order8      go to state 118
    expr_order7      go to state 119
    expr_order6      go to state 120
    expr_order5      go to state 121
    expr_order4      go to state 122
    expr_order3      go to state 123
    expr_order2      go to state 124
    expr_order1      go to state 125
    var_reference    go to state 126
    func_invocation  go to state 127


State 97

  100 simp_statement: KWread var_reference .

    $default  reduce using rule 100 (simp_statement)


State 98

  104 ret__statement: KWreturn expression_node .

    $default  reduce using rule 104 (ret__statement)


State 99

   43 ref_list: Lbracket . expression_node Rbracket

    $default  reduce using rule 106 (expression_start)

    expression_node   go to state 128
    expression_start  go to state 96


State 100

   42 ref_list: ref_list . Lbracket expression_node Rbracket
  102 var_reference: var_name ref_list .

    Lbracket  shift, and go to state 129

    $default  reduce using rule 102 (var_reference)


State 101

  103 func_invocation: func_name Lparenthese . expr_list Rparenthese

    Rparenthese  reduce using rule 39 (expr_list)
    $default     reduce using rule 106 (expression_start)

    expr_list             go to state 130
    _non_empty_expr_list  go to state 131
    expression_node       go to state 132
    expression_start      go to state 96


State 102

   92 define_state: simp_statement SEMICOLON .

    $default  reduce using rule 92 (define_state)


State 103

   98 simp_statement: var_reference ASSIGNMENT . expression_node

    $default  reduce using rule 106 (expression_start)

    expression_node   go to state 133
    expression_start  go to state 96


State 104

   96 define_state: func_invocation SEMICOLON .

    $default  reduce using rule 96 (define_state)


State 105

   97 define_state: ret__statement SEMICOLON .

    $default  reduce using rule 97 (define_state)


State 106

  107 cond_statement: cond_start KWif . expression_node KWthen statement_declar cond_midd KWelse statement_declar KWend KWif
  108               | cond_start KWif . expression_node KWthen statement_declar KWend KWif

    $default  reduce using rule 106 (expression_start)

    expression_node   go to state 134
    expression_start  go to state 96


State 107

  111 whil_statement: while_start KWwhile . expression_node KWdo statement_declar KWend KWdo

    $default  reduce using rule 106 (expression_start)

    expression_node   go to state 135
    expression_start  go to state 96


State 108

  113 for__statement: for_start KWfor . var_name ASSIGNMENT int_const KWto int_const KWdo statement_declar KWend KWdo

    IDENT  shift, and go to state 23

    var_name  go to state 136


State 109

   21 func_ret_type: COLON var_type .

    $default  reduce using rule 21 (func_ret_type)


State 110

   89 define_func: func_name Lparenthese arg_list Rparenthese func_ret_type SEMICOLON . compound_statement KWend IDENT

    $default  reduce using rule 122 (compound_statement_start)

    compound_statement        go to state 137
    compound_statement_start  go to state 13


State 111

   29 ddim_list: KWarray int_const KWto int_const . KWof

    KWof  shift, and go to state 138


State 112

   28 ddim_list: ddim_list KWarray int_const KWto . int_const KWof

    OCTAL    shift, and go to state 46
    INTEGER  shift, and go to state 47

    int_const  go to state 139


State 113

   82 expr_order1: Lparenthese . expression Rparenthese

    Lparenthese  shift, and go to state 113
    OP_DEL       shift, and go to state 114
    TF_NOT       shift, and go to state 115
    KWfalse      shift, and go to state 41
    KWtrue       shift, and go to state 45
    OCTAL        shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOAT        shift, and go to state 48
    SCIENTIFIC   shift, and go to state 49
    STRING       shift, and go to state 50
    IDENT        shift, and go to state 73

    var_name         go to state 74
    func_name        go to state 75
    int_const        go to state 51
    number_const     go to state 52
    string_const     go to state 53
    bool_const       go to state 54
    const_group      go to state 116
    expression       go to state 140
    expr_order8      go to state 118
    expr_order7      go to state 119
    expr_order6      go to state 120
    expr_order5      go to state 121
    expr_order4      go to state 122
    expr_order3      go to state 123
    expr_order2      go to state 124
    expr_order1      go to state 125
    var_reference    go to state 126
    func_invocation  go to state 127


State 114

   80 expr_order2: OP_DEL . expr_order2 $@15

    Lparenthese  shift, and go to state 113
    OP_DEL       shift, and go to state 114
    KWfalse      shift, and go to state 41
    KWtrue       shift, and go to state 45
    OCTAL        shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOAT        shift, and go to state 48
    SCIENTIFIC   shift, and go to state 49
    STRING       shift, and go to state 50
    IDENT        shift, and go to state 73

    var_name         go to state 74
    func_name        go to state 75
    int_const        go to state 51
    number_const     go to state 52
    string_const     go to state 53
    bool_const       go to state 54
    const_group      go to state 116
    expr_order2      go to state 141
    expr_order1      go to state 125
    var_reference    go to state 126
    func_invocation  go to state 127


State 115

   52 expr_order6: TF_NOT . expr_order6 $@3

    Lparenthese  shift, and go to state 113
    OP_DEL       shift, and go to state 114
    TF_NOT       shift, and go to state 115
    KWfalse      shift, and go to state 41
    KWtrue       shift, and go to state 45
    OCTAL        shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOAT        shift, and go to state 48
    SCIENTIFIC   shift, and go to state 49
    STRING       shift, and go to state 50
    IDENT        shift, and go to state 73

    var_name         go to state 74
    func_name        go to state 75
    int_const        go to state 51
    number_const     go to state 52
    string_const     go to state 53
    bool_const       go to state 54
    const_group      go to state 116
    expr_order6      go to state 142
    expr_order5      go to state 121
    expr_order4      go to state 122
    expr_order3      go to state 123
    expr_order2      go to state 124
    expr_order1      go to state 125
    var_reference    go to state 126
    func_invocation  go to state 127


State 116

   85 expr_order1: const_group .

    $default  reduce using rule 85 (expr_order1)


State 117

  105 expression_node: expression_start expression .

    $default  reduce using rule 105 (expression_node)


State 118

   44 expression: expr_order8 .
   46 expr_order8: expr_order8 . TF_OR expr_order7 $@1

    TF_OR  shift, and go to state 143

    $default  reduce using rule 44 (expression)


State 119

   47 expr_order8: expr_order7 .
   49 expr_order7: expr_order7 . TF_AND expr_order6 $@2

    TF_AND  shift, and go to state 144

    $default  reduce using rule 47 (expr_order8)


State 120

   50 expr_order7: expr_order6 .

    $default  reduce using rule 50 (expr_order7)


State 121

   53 expr_order6: expr_order5 .

    $default  reduce using rule 53 (expr_order6)


State 122

   55 expr_order5: expr_order4 . OP_LT expr_order5 $@4
   57            | expr_order4 . OP_LE expr_order5 $@5
   59            | expr_order4 . OP_GT expr_order5 $@6
   61            | expr_order4 . OP_GE expr_order5 $@7
   63            | expr_order4 . OP_EQ expr_order5 $@8
   65            | expr_order4 . OP_NE expr_order5 $@9
   66            | expr_order4 .
   68 expr_order4: expr_order4 . OP_ADD expr_order3 $@10
   70            | expr_order4 . OP_DEL expr_order3 $@11

    OP_ADD  shift, and go to state 145
    OP_DEL  shift, and go to state 146
    OP_LT   shift, and go to state 147
    OP_LE   shift, and go to state 148
    OP_GT   shift, and go to state 149
    OP_GE   shift, and go to state 150
    OP_EQ   shift, and go to state 151
    OP_NE   shift, and go to state 152

    $default  reduce using rule 66 (expr_order5)


State 123

   71 expr_order4: expr_order3 .
   73 expr_order3: expr_order3 . OP_MUL expr_order2 $@12
   75            | expr_order3 . OP_DIV expr_order2 $@13
   77            | expr_order3 . OP_MOD expr_order2 $@14

    OP_MUL  shift, and go to state 153
    OP_DIV  shift, and go to state 154
    OP_MOD  shift, and go to state 155

    $default  reduce using rule 71 (expr_order4)


State 124

   78 expr_order3: expr_order2 .

    $default  reduce using rule 78 (expr_order3)


State 125

   81 expr_order2: expr_order1 .

    $default  reduce using rule 81 (expr_order2)


State 126

   84 expr_order1: var_reference .

    $default  reduce using rule 84 (expr_order1)


State 127

   83 expr_order1: func_invocation .

    $default  reduce using rule 83 (expr_order1)


State 128

   43 ref_list: Lbracket expression_node . Rbracket

    Rbracket  shift, and go to state 156


State 129

   42 ref_list: ref_list Lbracket . expression_node Rbracket

    $default  reduce using rule 106 (expression_start)

    expression_node   go to state 157
    expression_start  go to state 96


State 130

  103 func_invocation: func_name Lparenthese expr_list . Rparenthese

    Rparenthese  shift, and go to state 158


State 131

   38 expr_list: _non_empty_expr_list .
   40 _non_empty_expr_list: _non_empty_expr_list . COMMA expression_node

    COMMA  shift, and go to state 159

    $default  reduce using rule 38 (expr_list)


State 132

   41 _non_empty_expr_list: expression_node .

    $default  reduce using rule 41 (_non_empty_expr_list)


State 133

   98 simp_statement: var_reference ASSIGNMENT expression_node .

    $default  reduce using rule 98 (simp_statement)


State 134

  107 cond_statement: cond_start KWif expression_node . KWthen statement_declar cond_midd KWelse statement_declar KWend KWif
  108               | cond_start KWif expression_node . KWthen statement_declar KWend KWif

    KWthen  shift, and go to state 160


State 135

  111 whil_statement: while_start KWwhile expression_node . KWdo statement_declar KWend KWdo

    KWdo  shift, and go to state 161


State 136

  113 for__statement: for_start KWfor var_name . ASSIGNMENT int_const KWto int_const KWdo statement_declar KWend KWdo

    ASSIGNMENT  shift, and go to state 162


State 137

   89 define_func: func_name Lparenthese arg_list Rparenthese func_ret_type SEMICOLON compound_statement . KWend IDENT

    KWend  shift, and go to state 163


State 138

   29 ddim_list: KWarray int_const KWto int_const KWof .

    $default  reduce using rule 29 (ddim_list)


State 139

   28 ddim_list: ddim_list KWarray int_const KWto int_const . KWof

    KWof  shift, and go to state 164


State 140

   82 expr_order1: Lparenthese expression . Rparenthese

    Rparenthese  shift, and go to state 165


State 141

   80 expr_order2: OP_DEL expr_order2 . $@15

    $default  reduce using rule 79 ($@15)

    $@15  go to state 166


State 142

   52 expr_order6: TF_NOT expr_order6 . $@3

    $default  reduce using rule 51 ($@3)

    $@3  go to state 167


State 143

   46 expr_order8: expr_order8 TF_OR . expr_order7 $@1

    Lparenthese  shift, and go to state 113
    OP_DEL       shift, and go to state 114
    TF_NOT       shift, and go to state 115
    KWfalse      shift, and go to state 41
    KWtrue       shift, and go to state 45
    OCTAL        shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOAT        shift, and go to state 48
    SCIENTIFIC   shift, and go to state 49
    STRING       shift, and go to state 50
    IDENT        shift, and go to state 73

    var_name         go to state 74
    func_name        go to state 75
    int_const        go to state 51
    number_const     go to state 52
    string_const     go to state 53
    bool_const       go to state 54
    const_group      go to state 116
    expr_order7      go to state 168
    expr_order6      go to state 120
    expr_order5      go to state 121
    expr_order4      go to state 122
    expr_order3      go to state 123
    expr_order2      go to state 124
    expr_order1      go to state 125
    var_reference    go to state 126
    func_invocation  go to state 127


State 144

   49 expr_order7: expr_order7 TF_AND . expr_order6 $@2

    Lparenthese  shift, and go to state 113
    OP_DEL       shift, and go to state 114
    TF_NOT       shift, and go to state 115
    KWfalse      shift, and go to state 41
    KWtrue       shift, and go to state 45
    OCTAL        shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOAT        shift, and go to state 48
    SCIENTIFIC   shift, and go to state 49
    STRING       shift, and go to state 50
    IDENT        shift, and go to state 73

    var_name         go to state 74
    func_name        go to state 75
    int_const        go to state 51
    number_const     go to state 52
    string_const     go to state 53
    bool_const       go to state 54
    const_group      go to state 116
    expr_order6      go to state 169
    expr_order5      go to state 121
    expr_order4      go to state 122
    expr_order3      go to state 123
    expr_order2      go to state 124
    expr_order1      go to state 125
    var_reference    go to state 126
    func_invocation  go to state 127


State 145

   68 expr_order4: expr_order4 OP_ADD . expr_order3 $@10

    Lparenthese  shift, and go to state 113
    OP_DEL       shift, and go to state 114
    KWfalse      shift, and go to state 41
    KWtrue       shift, and go to state 45
    OCTAL        shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOAT        shift, and go to state 48
    SCIENTIFIC   shift, and go to state 49
    STRING       shift, and go to state 50
    IDENT        shift, and go to state 73

    var_name         go to state 74
    func_name        go to state 75
    int_const        go to state 51
    number_const     go to state 52
    string_const     go to state 53
    bool_const       go to state 54
    const_group      go to state 116
    expr_order3      go to state 170
    expr_order2      go to state 124
    expr_order1      go to state 125
    var_reference    go to state 126
    func_invocation  go to state 127


State 146

   70 expr_order4: expr_order4 OP_DEL . expr_order3 $@11

    Lparenthese  shift, and go to state 113
    OP_DEL       shift, and go to state 114
    KWfalse      shift, and go to state 41
    KWtrue       shift, and go to state 45
    OCTAL        shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOAT        shift, and go to state 48
    SCIENTIFIC   shift, and go to state 49
    STRING       shift, and go to state 50
    IDENT        shift, and go to state 73

    var_name         go to state 74
    func_name        go to state 75
    int_const        go to state 51
    number_const     go to state 52
    string_const     go to state 53
    bool_const       go to state 54
    const_group      go to state 116
    expr_order3      go to state 171
    expr_order2      go to state 124
    expr_order1      go to state 125
    var_reference    go to state 126
    func_invocation  go to state 127


State 147

   55 expr_order5: expr_order4 OP_LT . expr_order5 $@4

    Lparenthese  shift, and go to state 113
    OP_DEL       shift, and go to state 114
    KWfalse      shift, and go to state 41
    KWtrue       shift, and go to state 45
    OCTAL        shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOAT        shift, and go to state 48
    SCIENTIFIC   shift, and go to state 49
    STRING       shift, and go to state 50
    IDENT        shift, and go to state 73

    var_name         go to state 74
    func_name        go to state 75
    int_const        go to state 51
    number_const     go to state 52
    string_const     go to state 53
    bool_const       go to state 54
    const_group      go to state 116
    expr_order5      go to state 172
    expr_order4      go to state 122
    expr_order3      go to state 123
    expr_order2      go to state 124
    expr_order1      go to state 125
    var_reference    go to state 126
    func_invocation  go to state 127


State 148

   57 expr_order5: expr_order4 OP_LE . expr_order5 $@5

    Lparenthese  shift, and go to state 113
    OP_DEL       shift, and go to state 114
    KWfalse      shift, and go to state 41
    KWtrue       shift, and go to state 45
    OCTAL        shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOAT        shift, and go to state 48
    SCIENTIFIC   shift, and go to state 49
    STRING       shift, and go to state 50
    IDENT        shift, and go to state 73

    var_name         go to state 74
    func_name        go to state 75
    int_const        go to state 51
    number_const     go to state 52
    string_const     go to state 53
    bool_const       go to state 54
    const_group      go to state 116
    expr_order5      go to state 173
    expr_order4      go to state 122
    expr_order3      go to state 123
    expr_order2      go to state 124
    expr_order1      go to state 125
    var_reference    go to state 126
    func_invocation  go to state 127


State 149

   59 expr_order5: expr_order4 OP_GT . expr_order5 $@6

    Lparenthese  shift, and go to state 113
    OP_DEL       shift, and go to state 114
    KWfalse      shift, and go to state 41
    KWtrue       shift, and go to state 45
    OCTAL        shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOAT        shift, and go to state 48
    SCIENTIFIC   shift, and go to state 49
    STRING       shift, and go to state 50
    IDENT        shift, and go to state 73

    var_name         go to state 74
    func_name        go to state 75
    int_const        go to state 51
    number_const     go to state 52
    string_const     go to state 53
    bool_const       go to state 54
    const_group      go to state 116
    expr_order5      go to state 174
    expr_order4      go to state 122
    expr_order3      go to state 123
    expr_order2      go to state 124
    expr_order1      go to state 125
    var_reference    go to state 126
    func_invocation  go to state 127


State 150

   61 expr_order5: expr_order4 OP_GE . expr_order5 $@7

    Lparenthese  shift, and go to state 113
    OP_DEL       shift, and go to state 114
    KWfalse      shift, and go to state 41
    KWtrue       shift, and go to state 45
    OCTAL        shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOAT        shift, and go to state 48
    SCIENTIFIC   shift, and go to state 49
    STRING       shift, and go to state 50
    IDENT        shift, and go to state 73

    var_name         go to state 74
    func_name        go to state 75
    int_const        go to state 51
    number_const     go to state 52
    string_const     go to state 53
    bool_const       go to state 54
    const_group      go to state 116
    expr_order5      go to state 175
    expr_order4      go to state 122
    expr_order3      go to state 123
    expr_order2      go to state 124
    expr_order1      go to state 125
    var_reference    go to state 126
    func_invocation  go to state 127


State 151

   63 expr_order5: expr_order4 OP_EQ . expr_order5 $@8

    Lparenthese  shift, and go to state 113
    OP_DEL       shift, and go to state 114
    KWfalse      shift, and go to state 41
    KWtrue       shift, and go to state 45
    OCTAL        shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOAT        shift, and go to state 48
    SCIENTIFIC   shift, and go to state 49
    STRING       shift, and go to state 50
    IDENT        shift, and go to state 73

    var_name         go to state 74
    func_name        go to state 75
    int_const        go to state 51
    number_const     go to state 52
    string_const     go to state 53
    bool_const       go to state 54
    const_group      go to state 116
    expr_order5      go to state 176
    expr_order4      go to state 122
    expr_order3      go to state 123
    expr_order2      go to state 124
    expr_order1      go to state 125
    var_reference    go to state 126
    func_invocation  go to state 127


State 152

   65 expr_order5: expr_order4 OP_NE . expr_order5 $@9

    Lparenthese  shift, and go to state 113
    OP_DEL       shift, and go to state 114
    KWfalse      shift, and go to state 41
    KWtrue       shift, and go to state 45
    OCTAL        shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOAT        shift, and go to state 48
    SCIENTIFIC   shift, and go to state 49
    STRING       shift, and go to state 50
    IDENT        shift, and go to state 73

    var_name         go to state 74
    func_name        go to state 75
    int_const        go to state 51
    number_const     go to state 52
    string_const     go to state 53
    bool_const       go to state 54
    const_group      go to state 116
    expr_order5      go to state 177
    expr_order4      go to state 122
    expr_order3      go to state 123
    expr_order2      go to state 124
    expr_order1      go to state 125
    var_reference    go to state 126
    func_invocation  go to state 127


State 153

   73 expr_order3: expr_order3 OP_MUL . expr_order2 $@12

    Lparenthese  shift, and go to state 113
    OP_DEL       shift, and go to state 114
    KWfalse      shift, and go to state 41
    KWtrue       shift, and go to state 45
    OCTAL        shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOAT        shift, and go to state 48
    SCIENTIFIC   shift, and go to state 49
    STRING       shift, and go to state 50
    IDENT        shift, and go to state 73

    var_name         go to state 74
    func_name        go to state 75
    int_const        go to state 51
    number_const     go to state 52
    string_const     go to state 53
    bool_const       go to state 54
    const_group      go to state 116
    expr_order2      go to state 178
    expr_order1      go to state 125
    var_reference    go to state 126
    func_invocation  go to state 127


State 154

   75 expr_order3: expr_order3 OP_DIV . expr_order2 $@13

    Lparenthese  shift, and go to state 113
    OP_DEL       shift, and go to state 114
    KWfalse      shift, and go to state 41
    KWtrue       shift, and go to state 45
    OCTAL        shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOAT        shift, and go to state 48
    SCIENTIFIC   shift, and go to state 49
    STRING       shift, and go to state 50
    IDENT        shift, and go to state 73

    var_name         go to state 74
    func_name        go to state 75
    int_const        go to state 51
    number_const     go to state 52
    string_const     go to state 53
    bool_const       go to state 54
    const_group      go to state 116
    expr_order2      go to state 179
    expr_order1      go to state 125
    var_reference    go to state 126
    func_invocation  go to state 127


State 155

   77 expr_order3: expr_order3 OP_MOD . expr_order2 $@14

    Lparenthese  shift, and go to state 113
    OP_DEL       shift, and go to state 114
    KWfalse      shift, and go to state 41
    KWtrue       shift, and go to state 45
    OCTAL        shift, and go to state 46
    INTEGER      shift, and go to state 47
    FLOAT        shift, and go to state 48
    SCIENTIFIC   shift, and go to state 49
    STRING       shift, and go to state 50
    IDENT        shift, and go to state 73

    var_name         go to state 74
    func_name        go to state 75
    int_const        go to state 51
    number_const     go to state 52
    string_const     go to state 53
    bool_const       go to state 54
    const_group      go to state 116
    expr_order2      go to state 180
    expr_order1      go to state 125
    var_reference    go to state 126
    func_invocation  go to state 127


State 156

   43 ref_list: Lbracket expression_node Rbracket .

    $default  reduce using rule 43 (ref_list)


State 157

   42 ref_list: ref_list Lbracket expression_node . Rbracket

    Rbracket  shift, and go to state 181


State 158

  103 func_invocation: func_name Lparenthese expr_list Rparenthese .

    $default  reduce using rule 103 (func_invocation)


State 159

   40 _non_empty_expr_list: _non_empty_expr_list COMMA . expression_node

    $default  reduce using rule 106 (expression_start)

    expression_node   go to state 182
    expression_start  go to state 96


State 160

  107 cond_statement: cond_start KWif expression_node KWthen . statement_declar cond_midd KWelse statement_declar KWend KWif
  108               | cond_start KWif expression_node KWthen . statement_declar KWend KWif

    $default  reduce using rule 116 (statement_start)

    statement_declar  go to state 183
    statement_start   go to state 32


State 161

  111 whil_statement: while_start KWwhile expression_node KWdo . statement_declar KWend KWdo

    $default  reduce using rule 116 (statement_start)

    statement_declar  go to state 184
    statement_start   go to state 32


State 162

  113 for__statement: for_start KWfor var_name ASSIGNMENT . int_const KWto int_const KWdo statement_declar KWend KWdo

    OCTAL    shift, and go to state 46
    INTEGER  shift, and go to state 47

    int_const  go to state 185


State 163

   89 define_func: func_name Lparenthese arg_list Rparenthese func_ret_type SEMICOLON compound_statement KWend . IDENT

    IDENT  shift, and go to state 186


State 164

   28 ddim_list: ddim_list KWarray int_const KWto int_const KWof .

    $default  reduce using rule 28 (ddim_list)


State 165

   82 expr_order1: Lparenthese expression Rparenthese .

    $default  reduce using rule 82 (expr_order1)


State 166

   80 expr_order2: OP_DEL expr_order2 $@15 .

    $default  reduce using rule 80 (expr_order2)


State 167

   52 expr_order6: TF_NOT expr_order6 $@3 .

    $default  reduce using rule 52 (expr_order6)


State 168

   46 expr_order8: expr_order8 TF_OR expr_order7 . $@1
   49 expr_order7: expr_order7 . TF_AND expr_order6 $@2

    TF_AND  shift, and go to state 144

    $default  reduce using rule 45 ($@1)

    $@1  go to state 187


State 169

   49 expr_order7: expr_order7 TF_AND expr_order6 . $@2

    $default  reduce using rule 48 ($@2)

    $@2  go to state 188


State 170

   68 expr_order4: expr_order4 OP_ADD expr_order3 . $@10
   73 expr_order3: expr_order3 . OP_MUL expr_order2 $@12
   75            | expr_order3 . OP_DIV expr_order2 $@13
   77            | expr_order3 . OP_MOD expr_order2 $@14

    OP_MUL  shift, and go to state 153
    OP_DIV  shift, and go to state 154
    OP_MOD  shift, and go to state 155

    $default  reduce using rule 67 ($@10)

    $@10  go to state 189


State 171

   70 expr_order4: expr_order4 OP_DEL expr_order3 . $@11
   73 expr_order3: expr_order3 . OP_MUL expr_order2 $@12
   75            | expr_order3 . OP_DIV expr_order2 $@13
   77            | expr_order3 . OP_MOD expr_order2 $@14

    OP_MUL  shift, and go to state 153
    OP_DIV  shift, and go to state 154
    OP_MOD  shift, and go to state 155

    $default  reduce using rule 69 ($@11)

    $@11  go to state 190


State 172

   55 expr_order5: expr_order4 OP_LT expr_order5 . $@4

    $default  reduce using rule 54 ($@4)

    $@4  go to state 191


State 173

   57 expr_order5: expr_order4 OP_LE expr_order5 . $@5

    $default  reduce using rule 56 ($@5)

    $@5  go to state 192


State 174

   59 expr_order5: expr_order4 OP_GT expr_order5 . $@6

    $default  reduce using rule 58 ($@6)

    $@6  go to state 193


State 175

   61 expr_order5: expr_order4 OP_GE expr_order5 . $@7

    $default  reduce using rule 60 ($@7)

    $@7  go to state 194


State 176

   63 expr_order5: expr_order4 OP_EQ expr_order5 . $@8

    $default  reduce using rule 62 ($@8)

    $@8  go to state 195


State 177

   65 expr_order5: expr_order4 OP_NE expr_order5 . $@9

    $default  reduce using rule 64 ($@9)

    $@9  go to state 196


State 178

   73 expr_order3: expr_order3 OP_MUL expr_order2 . $@12

    $default  reduce using rule 72 ($@12)

    $@12  go to state 197


State 179

   75 expr_order3: expr_order3 OP_DIV expr_order2 . $@13

    $default  reduce using rule 74 ($@13)

    $@13  go to state 198


State 180

   77 expr_order3: expr_order3 OP_MOD expr_order2 . $@14

    $default  reduce using rule 76 ($@14)

    $@14  go to state 199


State 181

   42 ref_list: ref_list Lbracket expression_node Rbracket .

    $default  reduce using rule 42 (ref_list)


State 182

   40 _non_empty_expr_list: _non_empty_expr_list COMMA expression_node .

    $default  reduce using rule 40 (_non_empty_expr_list)


State 183

  107 cond_statement: cond_start KWif expression_node KWthen statement_declar . cond_midd KWelse statement_declar KWend KWif
  108               | cond_start KWif expression_node KWthen statement_declar . KWend KWif

    KWend  shift, and go to state 200

    $default  reduce using rule 110 (cond_midd)

    cond_midd  go to state 201


State 184

  111 whil_statement: while_start KWwhile expression_node KWdo statement_declar . KWend KWdo

    KWend  shift, and go to state 202


State 185

  113 for__statement: for_start KWfor var_name ASSIGNMENT int_const . KWto int_const KWdo statement_declar KWend KWdo

    KWto  shift, and go to state 203


State 186

   89 define_func: func_name Lparenthese arg_list Rparenthese func_ret_type SEMICOLON compound_statement KWend IDENT .

    $default  reduce using rule 89 (define_func)


State 187

   46 expr_order8: expr_order8 TF_OR expr_order7 $@1 .

    $default  reduce using rule 46 (expr_order8)


State 188

   49 expr_order7: expr_order7 TF_AND expr_order6 $@2 .

    $default  reduce using rule 49 (expr_order7)


State 189

   68 expr_order4: expr_order4 OP_ADD expr_order3 $@10 .

    $default  reduce using rule 68 (expr_order4)


State 190

   70 expr_order4: expr_order4 OP_DEL expr_order3 $@11 .

    $default  reduce using rule 70 (expr_order4)


State 191

   55 expr_order5: expr_order4 OP_LT expr_order5 $@4 .

    $default  reduce using rule 55 (expr_order5)


State 192

   57 expr_order5: expr_order4 OP_LE expr_order5 $@5 .

    $default  reduce using rule 57 (expr_order5)


State 193

   59 expr_order5: expr_order4 OP_GT expr_order5 $@6 .

    $default  reduce using rule 59 (expr_order5)


State 194

   61 expr_order5: expr_order4 OP_GE expr_order5 $@7 .

    $default  reduce using rule 61 (expr_order5)


State 195

   63 expr_order5: expr_order4 OP_EQ expr_order5 $@8 .

    $default  reduce using rule 63 (expr_order5)


State 196

   65 expr_order5: expr_order4 OP_NE expr_order5 $@9 .

    $default  reduce using rule 65 (expr_order5)


State 197

   73 expr_order3: expr_order3 OP_MUL expr_order2 $@12 .

    $default  reduce using rule 73 (expr_order3)


State 198

   75 expr_order3: expr_order3 OP_DIV expr_order2 $@13 .

    $default  reduce using rule 75 (expr_order3)


State 199

   77 expr_order3: expr_order3 OP_MOD expr_order2 $@14 .

    $default  reduce using rule 77 (expr_order3)


State 200

  108 cond_statement: cond_start KWif expression_node KWthen statement_declar KWend . KWif

    KWif  shift, and go to state 204


State 201

  107 cond_statement: cond_start KWif expression_node KWthen statement_declar cond_midd . KWelse statement_declar KWend KWif

    KWelse  shift, and go to state 205


State 202

  111 whil_statement: while_start KWwhile expression_node KWdo statement_declar KWend . KWdo

    KWdo  shift, and go to state 206


State 203

  113 for__statement: for_start KWfor var_name ASSIGNMENT int_const KWto . int_const KWdo statement_declar KWend KWdo

    OCTAL    shift, and go to state 46
    INTEGER  shift, and go to state 47

    int_const  go to state 207


State 204

  108 cond_statement: cond_start KWif expression_node KWthen statement_declar KWend KWif .

    $default  reduce using rule 108 (cond_statement)


State 205

  107 cond_statement: cond_start KWif expression_node KWthen statement_declar cond_midd KWelse . statement_declar KWend KWif

    $default  reduce using rule 116 (statement_start)

    statement_declar  go to state 208
    statement_start   go to state 32


State 206

  111 whil_statement: while_start KWwhile expression_node KWdo statement_declar KWend KWdo .

    $default  reduce using rule 111 (whil_statement)


State 207

  113 for__statement: for_start KWfor var_name ASSIGNMENT int_const KWto int_const . KWdo statement_declar KWend KWdo

    KWdo  shift, and go to state 209


State 208

  107 cond_statement: cond_start KWif expression_node KWthen statement_declar cond_midd KWelse statement_declar . KWend KWif

    KWend  shift, and go to state 210


State 209

  113 for__statement: for_start KWfor var_name ASSIGNMENT int_const KWto int_const KWdo . statement_declar KWend KWdo

    $default  reduce using rule 116 (statement_start)

    statement_declar  go to state 211
    statement_start   go to state 32


State 210

  107 cond_statement: cond_start KWif expression_node KWthen statement_declar cond_midd KWelse statement_declar KWend . KWif

    KWif  shift, and go to state 212


State 211

  113 for__statement: for_start KWfor var_name ASSIGNMENT int_const KWto int_const KWdo statement_declar . KWend KWdo

    KWend  shift, and go to state 213


State 212

  107 cond_statement: cond_start KWif expression_node KWthen statement_declar cond_midd KWelse statement_declar KWend KWif .

    $default  reduce using rule 107 (cond_statement)


State 213

  113 for__statement: for_start KWfor var_name ASSIGNMENT int_const KWto int_const KWdo statement_declar KWend . KWdo

    KWdo  shift, and go to state 214


State 214

  113 for__statement: for_start KWfor var_name ASSIGNMENT int_const KWto int_const KWdo statement_declar KWend KWdo .

    $default  reduce using rule 113 (for__statement)
